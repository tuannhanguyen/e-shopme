package com.shopme.admin.category;

import java.io.IOException;
import java.util.Iterator;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Sort;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.shopme.admin.FileUploadUtil;
import com.shopme.common.entity.Category;

@Controller
public class CategoryController {

	@Autowired
	private CategoryService categoryService;
	
	@GetMapping("/categories")
	public String listFirstPage(Model model, @Param("sortDir") String sortDir) {

		return listByPage(1, model, sortDir);
	}
	
	@GetMapping("/categories/page/{pageNum}")
	public String listByPage(@PathVariable(name = "pageNum") int pageNum,
			Model model, @Param("sortDir") String sortDir){
		
		if (sortDir == null || sortDir.isEmpty()) {
			sortDir = "asc";
		}
		
		String reverseSortDir = sortDir.equals("asc") ? "desc" : "asc";
		
		CategoryPageInfo pageInfo = new CategoryPageInfo();
		List<Category> categories = categoryService.lisByPage(pageInfo, pageNum, sortDir);
		
		model.addAttribute("totalPages", pageInfo.getTotalPages());
		model.addAttribute("totalItems", pageInfo.getTotalElements());
		model.addAttribute("currentPage", pageNum);
		
		model.addAttribute("categories", categories);
		model.addAttribute("sortDir", sortDir);
		model.addAttribute("reverseSortDir", reverseSortDir);
		
		
		return "categories/categories";
		
	}
	
	@GetMapping("/categories/new")
	public String newCategory(Model model) {
		
		Category category = new Category();
		List<Category> categories = categoryService.listCategoriesUsedInForm();
		
		model.addAttribute("categories", categories);
		model.addAttribute("category", category);
		model.addAttribute("titlePage", "Create New Category");
		
		return "categories/category_form";
	}
	
	@PostMapping("/categories/save")
	public String saveCategory(Category category, 
			@RequestParam("fileImage") MultipartFile multipartFile,
			RedirectAttributes redirectAttributes) throws IOException {
		
		if(!multipartFile.isEmpty()) {
			String fileName = StringUtils.cleanPath(multipartFile.getOriginalFilename());
			category.setImage(fileName);
			Category savedCategory = categoryService.saveCategory(category);
			
			String uploadDir = "../category-images/" + savedCategory.getId();
			
			FileUploadUtil.cleanDir(uploadDir);
			FileUploadUtil.saveFile(uploadDir, fileName, multipartFile);
		} else {
			categoryService.saveCategory(category);
		}
		
		redirectAttributes.addFlashAttribute("message", "The category has been saved sucessfully");
		
		return "redirect:/categories";
	}
	
	@GetMapping("/categories/edit/{id}")
	public String editCategory(@PathVariable("id") Integer id,
			Model model,
			RedirectAttributes redirectAttributes) {
		
		try {
			Category category = categoryService.get(id);
			List<Category> categories = categoryService.listCategoriesUsedInForm();
			
			model.addAttribute("category", category);
			model.addAttribute("categories", categories);
			model.addAttribute("titlePage", "Edit Category " + "( ID: "+ id +" )");
			
			return "categories/category_form";
		} catch (CategoryNotFoundException e) {
			redirectAttributes.addFlashAttribute("message", e.getMessage());
			return "redirect:/categories";
		}
		
	}
	
	@GetMapping("/categories/delete/{id}")
	public String deleteCategory(@PathVariable("id") Integer id,
			RedirectAttributes redirectAttributes) {
		try {
			categoryService.deleteCategory(id);
			String categoryDir = "../category-images/" + id;
			FileUploadUtil.removeDir(categoryDir);
			redirectAttributes.addFlashAttribute("message", "The user ID "  + id + " has been deleted successfully");
		} catch (CategoryNotFoundException ex) {
			redirectAttributes.addFlashAttribute("message", ex.getMessage());
		}
		
		return "redirect:/categories";
	}
	
	@GetMapping("/categories/{id}/enabled/{enabled}")
	public String editEnabledStatus(@PathVariable("id") Integer id,
				@PathVariable("enabled") boolean enabled,
				RedirectAttributes redirectAttributes) throws CategoryNotFoundException {
		try {
			categoryService.editEnabledStatus(enabled, id);
			String message = enabled ? "enabled" : "disabled";
			redirectAttributes.addFlashAttribute("message", "The category ID " + id + " has been " + message);
		} catch (CategoryNotFoundException e) {
			redirectAttributes.addFlashAttribute("message", e.getMessage());
		}
		return "redirect:/categories";
	}
}
